#+TITLE:     provorg
#+AUTHOR:    shergill
#+EMAIL:     suhailshergill@gmail.com
#+DATE:      2013-03-31 Sun
#+DESCRIPTION: emacs' org-mode based provisioning system
#+KEYWORDS: provisioning,emacs,elisp,org-mode
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+PROPERTY: results silent
#+PROPERTY: dir-dyn yes
#+PROPERTY: sudo no
#+PROPERTY: dir ~
* DESCRIPTION
  provorg is going to be a push-based provisioning system (think [[http://www.nico.schottelius.org/software/cdist/][cdist]], but
  based off of emacs' [[http://orgmode.org/][org-mode]]).

  requirements:
  - working emacs + org-mode
  - ssh + sudo access to hosts (cf. cdist, which requires you to have ssh
    access to root)

  basic idea:
  - [ ] map physical hosts to capabilities
  - [ ] perhaps have some notion of types to group together capabilities
* utils
** provorg
  #+NAME: provorg/host/get
  #+BEGIN_SRC emacs-lisp :dir-dyn no :dir ~ 
    (provorg/host/get)
  #+END_SRC
  #+NAME: provorg/host/set
  #+BEGIN_SRC emacs-lisp :dir-dyn no :dir ~ :var host=""
    (provorg/host/set host)
  #+END_SRC
  #+NAME: provorg/host/push
  #+BEGIN_SRC emacs-lisp :dir-dyn no :dir ~ :var host=""
    (provorg/host/push host)
  #+END_SRC
  #+NAME: provorg/host/pop
  #+BEGIN_SRC emacs-lisp :dir-dyn no :dir ~ 
    (provorg/host/pop)
  #+END_SRC
  #+NAME: provorg/init
  #+BEGIN_SRC emacs-lisp 
    (setq org-confirm-babel-evaluate nil)
  #+END_SRC
  #+NAME: provorg/quit
  #+BEGIN_SRC emacs-lisp 
    (setq org-confirm-babel-evaluate t)
  #+END_SRC

** misc
  #+NAME: provorg/initd
  #+BEGIN_SRC sh :sudo yes :dir ~ :var app="reboot" :var action="start"
    /etc/init.d/$app $action
  #+END_SRC
  #+NAME: provorg/whoami
  #+BEGIN_SRC sh :sudo no :dir ~
    whoami
  #+END_SRC

  invoking bash in interactive mode in home directory and then within that
  traverse to directory of choice (while redirecting stdout), ensures that
  virtualenv startup messages don't get in the way of the actual stuff
  #+NAME: provorg/cmd
  #+BEGIN_SRC sh :dir ~ :var dir="~/" cmd="pwd" 
    bash -i - <<EOF
    cd $dir &> /dev/null
    $cmd
    EOF
  #+END_SRC

** git
   - fetch head
     #+NAME: git/head/get
     #+BEGIN_SRC sh :dir ~ 
       bash -i - <<EOF
       workon $proj &> /dev/null
       git rev-parse HEAD
       EOF
     #+END_SRC

  - [[http://stackoverflow.com/a/1549155][find common ancestor]]
  #+NAME: git/common-ancestor
  #+BEGIN_SRC sh :dir ~ :var A="HEAD" :var B="HEAD" 
    bash -i - <<EOF
    workon $proj 1> /dev/null
    git merge-base $A $B
    EOF
  #+END_SRC
  - [[http://stackoverflow.com/a/3763075][remote-tracking branch]]
  #+NAME: git/remote-tracking/get
  #+BEGIN_SRC sh :dir ~ 
    bash -i - <<EOF
    workon $proj 1> /dev/null
    git rev-parse --symbolic-full-name @{u}
    EOF
  #+END_SRC
  - [[http://stackoverflow.com/a/2941614][commit title between range]]
  #+NAME: git/log-titles-in-range
  #+BEGIN_SRC sh :dir ~ :var A="HEAD" :var B="HEAD"
    bash -i - <<EOF
    workon $proj 1> /dev/null
    git log --pretty=format:%s $A..$B
    EOF
  #+END_SRC

* HMM use async for sudo actions                                      :async:
  - [[http://www.gnu.org/software/tramp/#Password-handling][cache tramp passwords]]?
   
  - State "HMM"       from "TODO"       [2013-04-01 Mon 17:29] \\
    maybe this won't be needed after all? basically do all the heavy lifting using
    passwordless stuff w/ async (which basically means no `sudo' action), and then
    perform the sudo actions in the running emacs instance (which shouldn't be too
    bad since all the heavy lifting has been done)

   - State "TODO"       from ""           [2013-04-01 Mon 17:26] \\

   :PROPERTIES:
   :CUSTOM_ID: 67148f4e-4dc3-4c2f-bdac-f73c3cc8634b
   :END:
* TODO [[file:~/config/_common/emacs/.emacs.d/github/org/lisp/ob-tangle.el::182][org-babel-tangle]] [0/1]
  - [ ] specify block to tangle using [[file:~/.emacs.d/github/org/lisp/ob.el::1524][name]]
    - just define an elisp function which you can use?
    - use [[help:save-excursion][save-excursion]]
  
  [[help:][Definition reference for nil]]
  - State "TODO"       from ""           [2013-07-09 Tue 18:20] \\

  :PROPERTIES:
  :CUSTOM_ID: 9b224b3f-2c35-4165-9b96-64a202149484
  :END:
* DONE use [[https://github.com/jwiegley/emacs-async][async.el]] to execute (heavy) code blocks                    :async:
  CLOSED: [2013-04-01 Mon 17:27]

  - State "DONE"       from "TODO"       [2013-04-01 Mon 17:27] \\
    using `su/advice/ob/org-babel-execute-src-block/around/async'

  - State "TODO"       from ""           [2013-04-01 Mon 17:24] \\

  :PROPERTIES:
  :CUSTOM_ID: 80f01437-012e-4fc0-9c2e-b658fecc75d5
  :END:
* DONE ensure remote code execution works                            :bugfix:
  CLOSED: [2013-03-31 Sun 14:11]
  - State "DONE"       from "TODO"       [2013-03-31 Sun 14:11] \\
    Fixed by [[https://gist.github.com/suhailshergill/5233313][patch]]
  
  - State "TODO"       from ""           [2013-03-31 Sun 14:10] \\

  :PROPERTIES:
  :CUSTOM_ID: 8b6dd7bf-8ee7-4e61-be13-ab5cb3012b6c
  :END:
* DONE set host dynamically
  CLOSED: [2013-03-31 Sun 14:35]
  - State "DONE"       from "TODO"       [2013-03-31 Sun 14:35]
  
  - State "TODO"       from ""           [2013-03-31 Sun 14:08] \\

  :PROPERTIES:
  :CUSTOM_ID: a14252fd-dd46-413c-8219-1139558f38c1
  :END:
